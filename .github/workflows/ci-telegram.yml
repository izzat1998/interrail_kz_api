name: 🚀 CI/CD Pipeline with Interactive Telegram Notifications

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_THREAD_ID: ${{ secrets.TELEGRAM_THREAD_ID }}
  NOTIFICATION_LEVEL: "detailed"

jobs:
  notify-start:
    name: 🚀 Pipeline Start Notification
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    outputs:
      start_time: ${{ steps.start_time.outputs.start_time }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 💾 Create Initial Context & Capture Start Time
        id: start_time
        run: |
          START_TIME=$(date +%s)
          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          cat > /tmp/context.json << EOF
          {
            "start_time": $START_TIME,
            "completed_steps": [],
            "total_duration": 0,
            "step_duration": 0
          }
          EOF

      - name: 📱 Send Start Notification
        run: |
          cd scripts
          python telegram_notifier.py start || true
          # Copy message ID from the default location
          cp /tmp/telegram_message_id /tmp/message_id.txt 2>/dev/null || echo "NO_MESSAGE_ID" > /tmp/message_id.txt
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json
        continue-on-error: true

      - name: 📤 Upload Context and Message ID
        uses: actions/upload-artifact@v4
        with:
          name: telegram-context
          path: |
            /tmp/context.json
            /tmp/message_id.txt
          retention-days: 1

  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    needs: notify-start
    outputs:
      coverage_percentage: ${{ steps.coverage.outputs.coverage_percentage }}
      completed_steps: ${{ steps.coverage.outputs.completed_steps }}
      test_summary: ${{ steps.coverage.outputs.test_summary }}

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_interrail_kz_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📱 Download Context
        uses: actions/download-artifact@v4
        with:
          name: telegram-context
          path: /tmp/

      - name: 🔄 Restore Message ID
        run: |
          # Restore message ID to expected location
          cp /tmp/message_id.txt /tmp/telegram_message_id 2>/dev/null || echo "NO_MESSAGE_ID" > /tmp/telegram_message_id

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

          # Update progress
          (cd scripts && python telegram_notifier.py update "📦 Installing Dependencies" 20 "running") || true
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json
        continue-on-error: false

      - name: 🔍 Code Quality - Linting
        run: |
          echo "Running linting checks..."
          (cd scripts && python telegram_notifier.py update "🔍 Code Linting" 40 "running") || true

          # Run actual linting
          ruff check .
          ruff format --check .

          echo "Linting completed successfully!"
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json
        continue-on-error: false

      - name: 🗄️ Database Setup
        run: |
          (python scripts/telegram_notifier.py update "🗄️ Setting up Database" 50 "running") || true
          python manage.py migrate
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          USE_POSTGRES: True
          DB_NAME: test_interrail_kz_api
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          TELEGRAM_CONTEXT_FILE: /tmp/context.json

      - name: 🧪 Run Tests
        id: coverage
        run: |
          (python scripts/telegram_notifier.py update "🧪 Running Tests" 70 "running") || true

          # Run tests with coverage and detailed output
          pytest --cov=apps --cov-fail-under=80 --cov-report=html --cov-report=json -v --tb=short > test_results.txt 2>&1 || true

          # Extract coverage percentage and set as output
          COVERAGE=$(python -c "import json; data=json.load(open('coverage.json')); print(int(data['totals']['percent_covered']))")
          echo "coverage_percentage=$COVERAGE" >> $GITHUB_OUTPUT

          # Extract test statistics per app with debugging
          python -c "
          import re
          import json

          # Read test results
          with open('test_results.txt', 'r') as f:
              output = f.read()

          print('=== DEBUG: Raw test output (first 500 chars) ===')
          print(output[:500])
          print('=== DEBUG: Looking for PASSED/FAILED lines ===')

          # Extract test statistics
          test_stats = {}
          total_passed = 0
          total_failed = 0

          # Find all test results with pattern like 'tests/test_*.py::*'
          test_lines = re.findall(r'tests/test_(\w+)\.py::[^\s]+ (PASSED|FAILED)', output)
          print(f'DEBUG: Found {len(test_lines)} test result matches')

          for test_file, result in test_lines:
              # Extract app name from test file (e.g. 'api_basics' from 'test_api_basics')
              app_name = test_file.replace('_apis', '').replace('_', ' ').title()
              print(f'DEBUG: File={test_file}, App={app_name}, Result={result}')
              if app_name not in test_stats:
                  test_stats[app_name] = {'passed': 0, 'failed': 0}

              if result == 'PASSED':
                  test_stats[app_name]['passed'] += 1
                  total_passed += 1
              else:
                  test_stats[app_name]['failed'] += 1
                  total_failed += 1

          # Create test summary
          test_summary = {
              'total_passed': total_passed,
              'total_failed': total_failed,
              'total_tests': total_passed + total_failed,
              'by_app': test_stats
          }

          print(f'DEBUG: Final test summary: {test_summary}')

          # Write only the JSON to the file
          with open('test_summary.json', 'w') as f:
              json.dump(test_summary, f)
          "

          # Set test summary as output
          TEST_SUMMARY=$(cat test_summary.json)
          echo "Debug: Test summary content:"
          cat test_summary.json
          echo "test_summary=$TEST_SUMMARY" >> $GITHUB_OUTPUT

          # Set completed steps as output (JSON encoded)
          STEPS='["📦 Dependencies Installed","🔍 Code Linting Passed","🗄️ Database Setup","🧪 Tests Passed"]'
          echo "completed_steps=$STEPS" >> $GITHUB_OUTPUT

          echo "Tests completed with $COVERAGE% coverage!"
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          USE_POSTGRES: True
          DB_NAME: test_interrail_kz_api
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          TELEGRAM_CONTEXT_FILE: /tmp/context.json

      - name: 🏗️ Build Check
        run: |
          (python scripts/telegram_notifier.py update "🏗️ Build Validation" 90 "running") || true

          # Run Django checks
          echo "Running Django system checks..."
          python manage.py check

          echo "Django checks passed!"
          echo "Build validation completed!"

          # Send 100% completion signal to indicate test job is done
          (python scripts/telegram_notifier.py update "✅ All Steps Completed" 100 "success") || true
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          USE_POSTGRES: True
          DB_NAME: test_interrail_kz_api
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          TELEGRAM_CONTEXT_FILE: /tmp/context.json

      - name: 📊 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.json
          retention-days: 7

    # Context is now passed via job outputs - no need for artifacts

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: notify-start
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📱 Download Context
        uses: actions/download-artifact@v4
        with:
          name: telegram-context
          path: /tmp/

      - name: 🔄 Restore Message ID
        run: |
          # Restore message ID to expected location
          cp /tmp/message_id.txt /tmp/telegram_message_id 2>/dev/null || echo "NO_MESSAGE_ID" > /tmp/telegram_message_id

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install Security Tools
        run: |
          pip install bandit safety
          (python scripts/telegram_notifier.py update "🔒 Security Scanning" 25 "running") || true
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json

      - name: 🛡️ Run Security Scan
        run: |
          echo "Running security scans..."

          # Run bandit for security issues
          bandit -r apps/ -f json -o bandit-report.json || true

          # Run safety for dependency vulnerabilities
          safety check --json --output safety-report.json || true

          (python scripts/telegram_notifier.py update "🛡️ Security Scan Completed" 50 "success") || true
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json

      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [ test, security-scan ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.test.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    outputs:
      deploy_status: ${{ steps.set-outputs.outputs.deploy_status }}
      deploy_time: ${{ steps.set-outputs.outputs.deploy_time }}

    steps:
    - uses: actions/checkout@v4

    - name: 📱 Download Context
      uses: actions/download-artifact@v4
      with:
        name: telegram-context
        path: /tmp/

    - name: 🔄 Restore Message ID
      run: |
        cp /tmp/message_id.txt /tmp/telegram_message_id 2>/dev/null || echo "NO_MESSAGE_ID" > /tmp/telegram_message_id

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: 🚀 Start Deployment Notification
      run: |
        (python scripts/telegram_notifier.py update "🚀 Starting Deployment" 85 "running") || true
      env:
        TELEGRAM_CONTEXT_FILE: /tmp/context.json
      continue-on-error: true

    - name: 🚀 Deploy via SSH
      id: deploy
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        port: ${{ secrets.DEPLOY_PORT || 22 }}
        script: |
          cd /var/www/interrail_kz_api && \
          git pull origin main && \
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          python manage.py makemigrations && \
          python manage.py migrate && \
          python manage.py collectstatic --noinput && \
          sudo systemctl restart interrail_kz && \
          sudo systemctl restart nginx

    - name: Set deployment outputs
      id: set-outputs
      run: |
        echo "deploy_status=success" >> $GITHUB_OUTPUT
        echo "deploy_time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: 🎉 Deployment Success Notification
      if: success()
      run: |
        (python scripts/telegram_notifier.py update "🎉 Deployment Completed Successfully" 95 "success") || true
      env:
        TELEGRAM_CONTEXT_FILE: /tmp/context.json
      continue-on-error: true

    - name: ❌ Deployment Failure Notification
      if: failure()
      run: |
        (python scripts/telegram_notifier.py update "❌ Deployment Failed" 85 "failed") || true
      env:
        TELEGRAM_CONTEXT_FILE: /tmp/context.json
      continue-on-error: true

  notify-result:
    name: 📱 Final Notification
    runs-on: ubuntu-latest
    needs: [ notify-start, test, security-scan, deploy ]
    if: always()

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 💾 Create Context from Job Outputs
        run: |
          # Debug: Show what we received from job outputs and job results
          echo "=== JOB RESULTS DEBUG ==="
          echo "notify-start.result: ${{ needs.notify-start.result }}"
          echo "test.result: ${{ needs.test.result }}"
          echo "security-scan.result: ${{ needs.security-scan.result }}"
          echo "=== JOB OUTPUTS DEBUG ==="
          echo "start_time: ${{ needs.notify-start.outputs.start_time }}"
          echo "coverage: ${{ needs.test.outputs.coverage_percentage }}"
          echo "completed_steps: ${{ needs.test.outputs.completed_steps }}"
          echo "test_summary: ${{ needs.test.outputs.test_summary }}"

          # Create context file from reliable job outputs
          cat > /tmp/context.json << EOF
          {
            "start_time": ${{ needs.notify-start.outputs.start_time }},
            "coverage": ${{ needs.test.outputs.coverage_percentage }},
            "completed_steps": ${{ needs.test.outputs.completed_steps }},
            "test_summary": ${{ needs.test.outputs.test_summary }},
            "total_duration": 0
          }
          EOF

          echo "Debug: Final context file:"
          cat /tmp/context.json

      - name: 📊 Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage/
        continue-on-error: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📱 Download Message ID
        uses: actions/download-artifact@v4
        with:
          name: telegram-context
          path: /tmp/
        continue-on-error: true

      - name: 🔄 Restore Message ID
        run: |
          # Restore message ID to expected location from downloaded artifacts
          cp /tmp/message_id.txt /tmp/telegram_message_id 2>/dev/null || echo "NO_MESSAGE_ID" > /tmp/telegram_message_id

      - name: 📱 Send Success Notification
        if: needs.test.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.deploy.result == 'success' || needs.deploy.result == 'skipped')
        run: |
          # Calculate total duration using reliable job outputs
          START_TIME=${{ needs.notify-start.outputs.start_time }}
          END_TIME=$(date +%s)

          # Handle missing start_time gracefully
          if [ -z "$START_TIME" ] || [ "$START_TIME" = "null" ]; then
            echo "Warning: START_TIME is missing, using 0 duration"
            DURATION=0
          else
            DURATION=$((END_TIME - START_TIME))
          fi

          # Create final context with all test data using environment variables
          export START_TIME_VAL="${{ needs.notify-start.outputs.start_time }}"
          export COVERAGE_VAL="${{ needs.test.outputs.coverage_percentage }}"
          export COMPLETED_STEPS_VAL='${{ needs.test.outputs.completed_steps }}'
          export TEST_SUMMARY_VAL='${{ needs.test.outputs.test_summary }}'
          export DEPLOY_STATUS_VAL="${{ needs.deploy.outputs.deploy_status }}"

          python -c "
          import json
          import os

          # Create complete context with all data from environment variables
          context = {
              'start_time': int(os.environ.get('START_TIME_VAL', 0)),
              'total_duration': $DURATION,
              'coverage': int(os.environ.get('COVERAGE_VAL', 0)),
              'completed_steps': json.loads(os.environ.get('COMPLETED_STEPS_VAL', '[]')),
              'test_summary': json.loads(os.environ.get('TEST_SUMMARY_VAL', '{}')),
              'deploy_status': os.environ.get('DEPLOY_STATUS_VAL', 'skipped'),
              'coverage_url': 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              'artifacts_url': 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          }

          with open('/tmp/context.json', 'w') as f:
              json.dump(context, f)
          "

          echo "Calling telegram_notifier.py success..."
          echo "Debug: Checking message ID file..."
          ls -la /tmp/telegram_message_id
          cat /tmp/telegram_message_id 2>/dev/null || echo "Message ID file not found or empty"
          echo "Debug: Context file contents:"
          cat /tmp/context.json
          python scripts/telegram_notifier.py success || echo "ERROR: telegram_notifier.py failed with exit code $?"
          echo "telegram_notifier.py success completed"
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json

      - name: 📱 Send Failure Notification
        if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          # Determine which step failed
          FAILED_STEP="Unknown"
          ERROR_MESSAGE="Pipeline failed"

          if [ "${{ needs.test.result }}" == "failure" ]; then
            FAILED_STEP="Tests & Quality Checks"
            ERROR_MESSAGE="Tests or quality checks failed"
          elif [ "${{ needs.security-scan.result }}" == "failure" ]; then
            FAILED_STEP="Security Scan"
            ERROR_MESSAGE="Security vulnerabilities detected"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            FAILED_STEP="Deployment"
            ERROR_MESSAGE="Deployment to production failed"
          fi

          # Create failure context file from job outputs
          cat > /tmp/context.json << EOF
          {
            "start_time": ${{ needs.notify-start.outputs.start_time }},
            "completed_steps": ${{ needs.test.outputs.completed_steps || '[]' }},
            "failed_step": "$FAILED_STEP",
            "error_message": "$ERROR_MESSAGE",
            "error_logs_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "issue_url": "https://github.com/${{ github.repository }}/issues/new",
            "fix_suggestions": [
              "Check the logs for detailed error information",
              "Verify all dependencies are properly installed",
              "Ensure database migrations are up to date",
              "Review recent code changes for potential issues"
            ]
          }
          EOF

          python scripts/telegram_notifier.py failure
        env:
          TELEGRAM_CONTEXT_FILE: /tmp/context.json
